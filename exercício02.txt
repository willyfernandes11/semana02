2.a)
Etapa 1 - Preprocessing
 A etapa de pré-processamento é responsável por modificar o código-fonte do 
programa lexicamente. É nesta etapa que ocorre a suspensão de espaços 
desnecessários, substituição de macros e a inclusão de outros códigos (através 
das diretivas de pré-processamento). Esta etapa gera um código chamado de 
unidade de compilação.

 É possível realizar apenas a etapa de pré-processamento, através 
do comando gcc. Para isso, basta utilizar o seguinte comando: gcc 
–E <nome_programa>.c (mostra a unidade de compilação 
no terminal). Pode-se usar também a opção –o par 
armazenar a saída em um arquivo (gcc –E <nome_programa>.c 
–o <nome_unidade>.e)



Etapa 2 - Compilation Proper
 É na compilação que o compilador faz a análise sintática e semântica da 
unidade de compilação. Não havendo erro de sintaxe e de semântica o 
compilador gera o código assembly correspondente.

 A opção –S do gcc realiza a geração do código assembly e permite 
armazenar em um arquivo com a extensão .s (gcc –S 
<nome_programa>.c).

Etapa 3 - Assembly
 A etapa de montagem é responsável por gerar o código-objeto. Ou seja, é 
nessa etapa que os comandos assembly são transformados em linguagem de 
máquina
 A opção –c do gcc realiza a geração do código-objeto e permite 
armazenar em um arquivo com a extensão .o (gcc –c
<nome_programa>.c).

Etapa 4 - Linking
 Essa é a etapa final, onde ocorre a combinação de todos os códigos-objetos 
que compõem um programa C. O resultado desta etapa é um código 
executável.


b)
i) -static
	Linkar bibliotecas estáticas

ii) -g
	Include standard debugging information in the binary

iii) -pendatic
	Emite todos os avisos exigidos pelo padrão ANSI/ISO C.

iv) -wall
	Emite todos os avisos geralmente úteis que o gcc pode fornecer.
	Avisos específicos também podem ser sinalizados usando -W {warning}

v) -Os 
	Especifique o nome do arquivo de saída; não é necessário ao compilar
	ao código do objeto. Se FILE não for especificado, o nome padrão é
	a.fora
	Compilar sem linking

vi) -O3
	O compilador tem o cuidado de fazer
	Certifique-se de que o processador tenha instruções para executar enquanto aguarda os resultados de outras
	instruções ou latência de dados do cache ou da memória principal. A implementação é altamente
	específico do processador. As opções -O3 incluem todas as otimizações de O2 e outras
	características específicas do processador.





